@page "/"


@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.FileManager
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons

<SfRichTextEditor @ref="rteObj" @bind-Value="rteValue">
    <RichTextEditorToolbarSettings Items="@tools">
        <RichTextEditorCustomToolbarItems>
            <RichTextEditorCustomToolbarItem Name="FileManager">
                <Template>
                    <SfButton CssClass="e-tbar-btn e-icon-btn" IconCss="e-icons e-rte-file-manager" @onclick="OnFileManagerButtonClick"></SfButton>
                </Template>
            </RichTextEditorCustomToolbarItem>
        </RichTextEditorCustomToolbarItems>
    </RichTextEditorToolbarSettings>
</SfRichTextEditor>

<SfDialog Width="600px" ShowCloseIcon="true" @bind-Visible="isFileManagerVisible" IsModal="true" AllowPrerender="false">
    <DialogEvents OnOpen="DialogOnOpen"></DialogEvents>
    <DialogTemplates>
        <Header>Insert Image</Header>
        <Content>
            <div class="e-rte-fm">
                <SfFileManager @ref="fileManagerObj" TValue="FileManagerDirectoryContent" PopupTarget="e-rte-fm" ShowTooltip="false">
                    <FileManagerAjaxSettings Url="https://ej2-aspcore-service.azurewebsites.net/api/FileManager/FileOperations"
                                             UploadUrl="https://ej2-aspcore-service.azurewebsites.net/api/FileManager/Upload"
                                             DownloadUrl="https://ej2-aspcore-service.azurewebsites.net/api/FileManager/Download"
                                             GetImageUrl="https://ej2-aspcore-service.azurewebsites.net/api/FileManager/GetImage">
                    </FileManagerAjaxSettings>
                    <FileManagerEvents FileSelected="OnImageSelected" TValue="FileManagerDirectoryContent" OnFileOpen="OnFileOpen" />
                </SfFileManager>
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Insert" IsPrimary="true" OnClick="@OnInsertButtonClick" />
        <DialogButton Content="Cancel" OnClick="@OnFileManagerClose" />
    </DialogButtons>
</SfDialog>

@code {
    public SfRichTextEditor rteObj { get; set; }
    public SfFileManager<FileManagerDirectoryContent> fileManagerObj { get; set; }
    private bool isFileManagerVisible { get; set; } = false;
    private FileManagerDirectoryContent selectedFile { get; set; }

    private string rteValue { get; set; } = @"<p>
    The Rich Text Editor is a WYSIWYG('what you see is what you get') editor useful to create and edit content and return the valid
    HTML markup or markdown of the content.
    </p>
    <b>Toolbar</b>
    <ol>
    <li>The toolbar contains commands to align the text, insert a link, insert an image, insert a list, perform undo/redo operations, switch to HTML view, etc.</li>
    <li>The toolbar is fully customizable.</li>
    </ol>
    <b>Links</b>
    <ol>
    <li>You can insert a hyperlink with its corresponding dialog.</li>
    <li>Attach a hyperlink to the displayed text.</li>
    <li>Customize the quick toolbar based on the hyperlink.</li>
    </ol>
    <b>Image</b>
    <ol>
    <li>Allows you to insert images from an online source as well as the local computer.</li>
    <li>You can upload an image.</li>
    <li>Provides an option to customize the quick toolbar for an image.</li>
    </ol>";

    private void OnFileManagerButtonClick()
    {
        isFileManagerVisible = true;
    }
    private void DialogOnOpen()
    {
        rteObj.SaveSelectionAsync();
    }

    private void OnFileManagerClose()
    {
        isFileManagerVisible = false;
    }

    private async Task OnInsertButtonClick()
    {
        if (selectedFile != null && (selectedFile.Type == ".jpeg" || selectedFile.Type == ".jpg" || selectedFile.Type == ".png"))
        {
            var path = selectedFile.FilterPath == null ? "/" : selectedFile.FilterPath;
            var updatedPath = path.Replace("\\", "//");
            var url = "https://ej2-aspcore-service.azurewebsites.net/api/FileManager/GetImage" + "?path=" + updatedPath + selectedFile.Name;

            await rteObj.FocusAsync();
            await rteObj.RestoreSelectionAsync();
            await rteObj.ExecuteCommandAsync(CommandName.InsertImage, new ImageCommandsArgs()
                {
                    Url = url,
                    CssClass = "rte-server-img"
                }, new ExecuteCommandOption() { Undo = true });
            isFileManagerVisible = false;
        }
    }

    private void OnImageSelected(FileSelectEventArgs<FileManagerDirectoryContent> args)
    {
        if (args.FileDetails.Type != "" && (args.FileDetails.Type == ".jpeg" || args.FileDetails.Type == ".jpg" || args.FileDetails.Type == ".png"))
        {
            selectedFile = args.FileDetails;
        }
        else
        {
            selectedFile = null;
        }
    }

    public void OnFileOpen(FileOpenEventArgs<FileManagerDirectoryContent> args)
    {
        if (args.FileDetails.Type == ".png" || args.FileDetails.Type == ".jpeg" || args.FileDetails.Type == ".jpg")
        {
            args.Cancel = true;
        }
    }

    private List<ToolbarItemModel> tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Name = "FileManager", TooltipText = "File Manager" },
       new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };
}